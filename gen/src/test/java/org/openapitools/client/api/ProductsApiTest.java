/*
 * üèõÔ∏è TDW - ACiencia REST api
 * [UPM] TDW REST api ACiencia
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: miw.etsisi@upm.es
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse2004;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Ignore
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    
    /**
     * Retrieves the collection of Product resources.
     *
     * Returns all products from the system that the user has access to.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsCgetTest() throws ApiException {
        String order = null;
        String ordering = null;
        InlineResponse2002 response = api.apiProductsCget(order, ordering);

        // TODO: test validations
    }
    
    /**
     * Provides the list of HTTP supported methods.
     *
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsCoptionsTest() throws ApiException {
        api.apiProductsCoptions();

        // TODO: test validations
    }
    
    /**
     * Removes the Product resource.
     *
     * Deletes the product identified by &#x60;productId&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsDeleteTest() throws ApiException {
        Integer productId = null;
        api.apiProductsDelete(productId);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Product resource based on a single ID.
     *
     * Returns the product identified by &#x60;productId&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsGetTest() throws ApiException {
        Integer productId = null;
        Product response = api.apiProductsGet(productId);

        // TODO: test validations
    }
    
    /**
     * Provides the list of HTTP supported methods.
     *
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsOptionsIdTest() throws ApiException {
        Integer productId = null;
        api.apiProductsOptionsId(productId);

        // TODO: test validations
    }
    
    /**
     * Creates a Product resource.
     *
     * Creates a new product
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsPostTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Product response = api.apiProductsPost(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Updates the Product resource.
     *
     * Updates the product identified by &#x60;productId&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiProductsPutTest() throws ApiException {
        Integer productId = null;
        String ifMatch = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Product response = api.apiProductsPut(productId, ifMatch, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Determines if productname exists
     *
     * Returns status code 204 if &#x60;productname&#x60; exists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tdwGetProductNameTest() throws ApiException {
        String productname = null;
        api.tdwGetProductName(productname);

        // TODO: test validations
    }
    
    /**
     * Sets the relationship product-entity
     *
     * Establishes the relationship of the product with the entity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tdwProductsAddEntityTest() throws ApiException {
        Integer productId = null;
        Integer entityId = null;
        Product response = api.tdwProductsAddEntity(productId, entityId);

        // TODO: test validations
    }
    
    /**
     * Sets the relationship product-person
     *
     * Establishes the relationship of the product with the person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tdwProductsAddPersonTest() throws ApiException {
        Integer productId = null;
        Integer personId = null;
        Product response = api.tdwProductsAddPerson(productId, personId);

        // TODO: test validations
    }
    
    /**
     * List of entities related to the product
     *
     * Returns the entities related to the product &#x60;productId&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tdwProductsGetEntitiesTest() throws ApiException {
        Integer productId = null;
        InlineResponse2003 response = api.tdwProductsGetEntities(productId);

        // TODO: test validations
    }
    
    /**
     * List of persons related to the product
     *
     * Returns the persons related to the product &#x60;productId&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tdwProductsGetPersonsTest() throws ApiException {
        Integer productId = null;
        InlineResponse2004 response = api.tdwProductsGetPersons(productId);

        // TODO: test validations
    }
    
    /**
     * Remove the relationship product-entity
     *
     * Removes the relationship of the product with the entity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tdwProductsRemEntityTest() throws ApiException {
        Integer productId = null;
        Integer entityId = null;
        Product response = api.tdwProductsRemEntity(productId, entityId);

        // TODO: test validations
    }
    
    /**
     * Remove the relationship product-person
     *
     * Removes the relationship of the product with the person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tdwProductsRemPersonTest() throws ApiException {
        Integer productId = null;
        Integer personId = null;
        Product response = api.tdwProductsRemPerson(productId, personId);

        // TODO: test validations
    }
    
}
