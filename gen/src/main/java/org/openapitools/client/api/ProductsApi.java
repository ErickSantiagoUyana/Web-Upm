/*
 * üèõÔ∏è TDW - ACiencia REST api
 * [UPM] TDW REST api ACiencia
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: miw.etsisi@upm.es
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse2004;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient localVarApiClient;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiProductsCget
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsCgetCall(String order, String ordering, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiProductsCgetValidateBeforeCall(String order, String ordering, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiProductsCgetCall(order, ordering, _callback);
        return localVarCall;

    }

    /**
     * Retrieves the collection of Product resources.
     * Returns all products from the system that the user has access to.
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2002 apiProductsCget(String order, String ordering) throws ApiException {
        ApiResponse<InlineResponse2002> localVarResp = apiProductsCgetWithHttpInfo(order, ordering);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of Product resources.
     * Returns all products from the system that the user has access to.
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2002> apiProductsCgetWithHttpInfo(String order, String ordering) throws ApiException {
        okhttp3.Call localVarCall = apiProductsCgetValidateBeforeCall(order, ordering, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of Product resources. (asynchronously)
     * Returns all products from the system that the user has access to.
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsCgetAsync(String order, String ordering, final ApiCallback<InlineResponse2002> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiProductsCgetValidateBeforeCall(order, ordering, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiProductsCoptions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsCoptionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiProductsCoptionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiProductsCoptionsCall(_callback);
        return localVarCall;

    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public void apiProductsCoptions() throws ApiException {
        apiProductsCoptionsWithHttpInfo();
    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiProductsCoptionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiProductsCoptionsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Provides the list of HTTP supported methods. (asynchronously)
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsCoptionsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiProductsCoptionsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiProductsDelete
     * @param productId ID of product (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsDeleteCall(Integer productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiProductsDeleteValidateBeforeCall(Integer productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling apiProductsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = apiProductsDeleteCall(productId, _callback);
        return localVarCall;

    }

    /**
     * Removes the Product resource.
     * Deletes the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void apiProductsDelete(Integer productId) throws ApiException {
        apiProductsDeleteWithHttpInfo(productId);
    }

    /**
     * Removes the Product resource.
     * Deletes the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiProductsDeleteWithHttpInfo(Integer productId) throws ApiException {
        okhttp3.Call localVarCall = apiProductsDeleteValidateBeforeCall(productId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes the Product resource. (asynchronously)
     * Deletes the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsDeleteAsync(Integer productId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiProductsDeleteValidateBeforeCall(productId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiProductsGet
     * @param productId ID of product (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsGetCall(Integer productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiProductsGetValidateBeforeCall(Integer productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling apiProductsGet(Async)");
        }
        

        okhttp3.Call localVarCall = apiProductsGetCall(productId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a Product resource based on a single ID.
     * Returns the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Product apiProductsGet(Integer productId) throws ApiException {
        ApiResponse<Product> localVarResp = apiProductsGetWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Product resource based on a single ID.
     * Returns the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> apiProductsGetWithHttpInfo(Integer productId) throws ApiException {
        okhttp3.Call localVarCall = apiProductsGetValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Product resource based on a single ID. (asynchronously)
     * Returns the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsGetAsync(Integer productId, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiProductsGetValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiProductsOptionsId
     * @param productId ID of product (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsOptionsIdCall(Integer productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiProductsOptionsIdValidateBeforeCall(Integer productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling apiProductsOptionsId(Async)");
        }
        

        okhttp3.Call localVarCall = apiProductsOptionsIdCall(productId, _callback);
        return localVarCall;

    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param productId ID of product (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public void apiProductsOptionsId(Integer productId) throws ApiException {
        apiProductsOptionsIdWithHttpInfo(productId);
    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param productId ID of product (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiProductsOptionsIdWithHttpInfo(Integer productId) throws ApiException {
        okhttp3.Call localVarCall = apiProductsOptionsIdValidateBeforeCall(productId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Provides the list of HTTP supported methods. (asynchronously)
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param productId ID of product (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsOptionsIdAsync(Integer productId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiProductsOptionsIdValidateBeforeCall(productId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiProductsPost
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: product created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsPostCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiProductsPostValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiProductsPostCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Creates a Product resource.
     * Creates a new product
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: product created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public Product apiProductsPost(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<Product> localVarResp = apiProductsPostWithHttpInfo(UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Creates a Product resource.
     * Creates a new product
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: product created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> apiProductsPostWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = apiProductsPostValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a Product resource. (asynchronously)
     * Creates a new product
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: product created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsPostAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiProductsPostValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiProductsPut
     * @param productId ID of product (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsPutCall(Integer productId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiProductsPutValidateBeforeCall(Integer productId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling apiProductsPut(Async)");
        }
        
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling apiProductsPut(Async)");
        }
        

        okhttp3.Call localVarCall = apiProductsPutCall(productId, ifMatch, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Updates the Product resource.
     * Updates the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public Product apiProductsPut(Integer productId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<Product> localVarResp = apiProductsPutWithHttpInfo(productId, ifMatch, UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Updates the Product resource.
     * Updates the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> apiProductsPutWithHttpInfo(Integer productId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = apiProductsPutValidateBeforeCall(productId, ifMatch, UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Product resource. (asynchronously)
     * Updates the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsPutAsync(Integer productId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiProductsPutValidateBeforeCall(productId, ifMatch, UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tdwGetProductName
     * @param productname Product name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Productname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwGetProductNameCall(String productname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/productname/{productname}"
            .replaceAll("\\{" + "productname" + "\\}", localVarApiClient.escapeString(productname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tdwGetProductNameValidateBeforeCall(String productname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productname' is set
        if (productname == null) {
            throw new ApiException("Missing the required parameter 'productname' when calling tdwGetProductName(Async)");
        }
        

        okhttp3.Call localVarCall = tdwGetProductNameCall(productname, _callback);
        return localVarCall;

    }

    /**
     * Determines if productname exists
     * Returns status code 204 if &#x60;productname&#x60; exists.
     * @param productname Product name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Productname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void tdwGetProductName(String productname) throws ApiException {
        tdwGetProductNameWithHttpInfo(productname);
    }

    /**
     * Determines if productname exists
     * Returns status code 204 if &#x60;productname&#x60; exists.
     * @param productname Product name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Productname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tdwGetProductNameWithHttpInfo(String productname) throws ApiException {
        okhttp3.Call localVarCall = tdwGetProductNameValidateBeforeCall(productname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Determines if productname exists (asynchronously)
     * Returns status code 204 if &#x60;productname&#x60; exists.
     * @param productname Product name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Productname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwGetProductNameAsync(String productname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tdwGetProductNameValidateBeforeCall(productname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tdwProductsAddEntity
     * @param productId ID of product (required)
     * @param entityId ID of entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwProductsAddEntityCall(Integer productId, Integer entityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/entities/add/{entityId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "entityId" + "\\}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tdwProductsAddEntityValidateBeforeCall(Integer productId, Integer entityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling tdwProductsAddEntity(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling tdwProductsAddEntity(Async)");
        }
        

        okhttp3.Call localVarCall = tdwProductsAddEntityCall(productId, entityId, _callback);
        return localVarCall;

    }

    /**
     * Sets the relationship product-entity
     * Establishes the relationship of the product with the entity
     * @param productId ID of product (required)
     * @param entityId ID of entity (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Product tdwProductsAddEntity(Integer productId, Integer entityId) throws ApiException {
        ApiResponse<Product> localVarResp = tdwProductsAddEntityWithHttpInfo(productId, entityId);
        return localVarResp.getData();
    }

    /**
     * Sets the relationship product-entity
     * Establishes the relationship of the product with the entity
     * @param productId ID of product (required)
     * @param entityId ID of entity (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> tdwProductsAddEntityWithHttpInfo(Integer productId, Integer entityId) throws ApiException {
        okhttp3.Call localVarCall = tdwProductsAddEntityValidateBeforeCall(productId, entityId, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets the relationship product-entity (asynchronously)
     * Establishes the relationship of the product with the entity
     * @param productId ID of product (required)
     * @param entityId ID of entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwProductsAddEntityAsync(Integer productId, Integer entityId, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = tdwProductsAddEntityValidateBeforeCall(productId, entityId, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tdwProductsAddPerson
     * @param productId ID of product (required)
     * @param personId ID of person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwProductsAddPersonCall(Integer productId, Integer personId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/persons/add/{personId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tdwProductsAddPersonValidateBeforeCall(Integer productId, Integer personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling tdwProductsAddPerson(Async)");
        }
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling tdwProductsAddPerson(Async)");
        }
        

        okhttp3.Call localVarCall = tdwProductsAddPersonCall(productId, personId, _callback);
        return localVarCall;

    }

    /**
     * Sets the relationship product-person
     * Establishes the relationship of the product with the person
     * @param productId ID of product (required)
     * @param personId ID of person (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Product tdwProductsAddPerson(Integer productId, Integer personId) throws ApiException {
        ApiResponse<Product> localVarResp = tdwProductsAddPersonWithHttpInfo(productId, personId);
        return localVarResp.getData();
    }

    /**
     * Sets the relationship product-person
     * Establishes the relationship of the product with the person
     * @param productId ID of product (required)
     * @param personId ID of person (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> tdwProductsAddPersonWithHttpInfo(Integer productId, Integer personId) throws ApiException {
        okhttp3.Call localVarCall = tdwProductsAddPersonValidateBeforeCall(productId, personId, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets the relationship product-person (asynchronously)
     * Establishes the relationship of the product with the person
     * @param productId ID of product (required)
     * @param personId ID of person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwProductsAddPersonAsync(Integer productId, Integer personId, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = tdwProductsAddPersonValidateBeforeCall(productId, personId, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tdwProductsGetEntities
     * @param productId ID of product (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwProductsGetEntitiesCall(Integer productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/entities"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tdwProductsGetEntitiesValidateBeforeCall(Integer productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling tdwProductsGetEntities(Async)");
        }
        

        okhttp3.Call localVarCall = tdwProductsGetEntitiesCall(productId, _callback);
        return localVarCall;

    }

    /**
     * List of entities related to the product
     * Returns the entities related to the product &#x60;productId&#x60;
     * @param productId ID of product (required)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2003 tdwProductsGetEntities(Integer productId) throws ApiException {
        ApiResponse<InlineResponse2003> localVarResp = tdwProductsGetEntitiesWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * List of entities related to the product
     * Returns the entities related to the product &#x60;productId&#x60;
     * @param productId ID of product (required)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2003> tdwProductsGetEntitiesWithHttpInfo(Integer productId) throws ApiException {
        okhttp3.Call localVarCall = tdwProductsGetEntitiesValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of entities related to the product (asynchronously)
     * Returns the entities related to the product &#x60;productId&#x60;
     * @param productId ID of product (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwProductsGetEntitiesAsync(Integer productId, final ApiCallback<InlineResponse2003> _callback) throws ApiException {

        okhttp3.Call localVarCall = tdwProductsGetEntitiesValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tdwProductsGetPersons
     * @param productId ID of product (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwProductsGetPersonsCall(Integer productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/persons"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tdwProductsGetPersonsValidateBeforeCall(Integer productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling tdwProductsGetPersons(Async)");
        }
        

        okhttp3.Call localVarCall = tdwProductsGetPersonsCall(productId, _callback);
        return localVarCall;

    }

    /**
     * List of persons related to the product
     * Returns the persons related to the product &#x60;productId&#x60;
     * @param productId ID of product (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2004 tdwProductsGetPersons(Integer productId) throws ApiException {
        ApiResponse<InlineResponse2004> localVarResp = tdwProductsGetPersonsWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * List of persons related to the product
     * Returns the persons related to the product &#x60;productId&#x60;
     * @param productId ID of product (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2004> tdwProductsGetPersonsWithHttpInfo(Integer productId) throws ApiException {
        okhttp3.Call localVarCall = tdwProductsGetPersonsValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of persons related to the product (asynchronously)
     * Returns the persons related to the product &#x60;productId&#x60;
     * @param productId ID of product (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwProductsGetPersonsAsync(Integer productId, final ApiCallback<InlineResponse2004> _callback) throws ApiException {

        okhttp3.Call localVarCall = tdwProductsGetPersonsValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tdwProductsRemEntity
     * @param productId ID of product (required)
     * @param entityId ID of entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwProductsRemEntityCall(Integer productId, Integer entityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/entities/rem/{entityId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "entityId" + "\\}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tdwProductsRemEntityValidateBeforeCall(Integer productId, Integer entityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling tdwProductsRemEntity(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling tdwProductsRemEntity(Async)");
        }
        

        okhttp3.Call localVarCall = tdwProductsRemEntityCall(productId, entityId, _callback);
        return localVarCall;

    }

    /**
     * Remove the relationship product-entity
     * Removes the relationship of the product with the entity
     * @param productId ID of product (required)
     * @param entityId ID of entity (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Product tdwProductsRemEntity(Integer productId, Integer entityId) throws ApiException {
        ApiResponse<Product> localVarResp = tdwProductsRemEntityWithHttpInfo(productId, entityId);
        return localVarResp.getData();
    }

    /**
     * Remove the relationship product-entity
     * Removes the relationship of the product with the entity
     * @param productId ID of product (required)
     * @param entityId ID of entity (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> tdwProductsRemEntityWithHttpInfo(Integer productId, Integer entityId) throws ApiException {
        okhttp3.Call localVarCall = tdwProductsRemEntityValidateBeforeCall(productId, entityId, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove the relationship product-entity (asynchronously)
     * Removes the relationship of the product with the entity
     * @param productId ID of product (required)
     * @param entityId ID of entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwProductsRemEntityAsync(Integer productId, Integer entityId, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = tdwProductsRemEntityValidateBeforeCall(productId, entityId, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tdwProductsRemPerson
     * @param productId ID of product (required)
     * @param personId ID of person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwProductsRemPersonCall(Integer productId, Integer personId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/persons/rem/{personId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tdwProductsRemPersonValidateBeforeCall(Integer productId, Integer personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling tdwProductsRemPerson(Async)");
        }
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling tdwProductsRemPerson(Async)");
        }
        

        okhttp3.Call localVarCall = tdwProductsRemPersonCall(productId, personId, _callback);
        return localVarCall;

    }

    /**
     * Remove the relationship product-person
     * Removes the relationship of the product with the person
     * @param productId ID of product (required)
     * @param personId ID of person (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Product tdwProductsRemPerson(Integer productId, Integer personId) throws ApiException {
        ApiResponse<Product> localVarResp = tdwProductsRemPersonWithHttpInfo(productId, personId);
        return localVarResp.getData();
    }

    /**
     * Remove the relationship product-person
     * Removes the relationship of the product with the person
     * @param productId ID of product (required)
     * @param personId ID of person (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> tdwProductsRemPersonWithHttpInfo(Integer productId, Integer personId) throws ApiException {
        okhttp3.Call localVarCall = tdwProductsRemPersonValidateBeforeCall(productId, personId, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove the relationship product-person (asynchronously)
     * Removes the relationship of the product with the person
     * @param productId ID of product (required)
     * @param personId ID of person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tdwProductsRemPersonAsync(Integer productId, Integer personId, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = tdwProductsRemPersonValidateBeforeCall(productId, personId, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
